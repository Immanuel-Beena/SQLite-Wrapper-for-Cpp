#ifndef __sqlite__$__
#define __sqlite__$__ 465
#include<sqlite3.h>
#include<iostream>
#include<forward_list>
#include<queue>
#include<map>
#include<sqliteException>
namespace sqlite
{
class StringComparator
{
public:
bool operator()(string *,string *);
};
class Row
{
private:
map<string *,string *,StringComparator> row;
public:
Row() throw (SQLiteException);
Row & operator=(forward_list<string *> *) throw (SQLiteException);
int getInt(const char *) throw (SQLiteException);
string getString(const char *) throw (SQLiteException);
};
class Rows
{
private:
queue<forward_list<string *> *> *dataRows;
public:
Rows() throw (SQLiteException);
Rows(queue<forward_list<string *> *> *) throw (SQLiteException);
Rows(const Rows &other) throw (SQLiteException);
virtual ~Rows() throw (SQLiteException);
Rows & operator=(queue<forward_list<string *> *> *) throw (SQLiteException);
int hasMoreRows() throw (SQLiteException);
forward_list<string *> * getRow() throw (SQLiteException);
};
class SqliteDB
{
private:
sqlite3 *db;
string FILE_NAME;
public:
SqliteDB() throw (SQLiteException);
SqliteDB(const SqliteDB &other) throw (SQLiteException);
SqliteDB(const char *) throw (SQLiteException);
SqliteDB(string &) throw (SQLiteException);
virtual ~SqliteDB() throw (SQLiteException);
void executeInsert(const char *) throw (SQLiteException);
void executeInsert(const string &) throw (SQLiteException);
void close() throw (SQLiteException);
void open(const char *) throw (SQLiteException);
queue<forward_list<string *> *> * selectRows(const char *) throw (SQLiteException);
queue<forward_list<string *> *> * selectRows(const string &) throw (SQLiteException);
};
}
#endif